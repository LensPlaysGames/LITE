;;!;; LITE Text Editor Standard Library ;;!;;

;; DO NOT REORDER THESE UNLESS YOU REALLY KNOW WHAT YOU ARE DOING
(evaluate-file "lisp/std/basics.lt")
(evaluate-file "lisp/std/maths.lt")
(evaluate-file "lisp/std/lists.lt")
(evaluate-file "lisp/std/structures.lt")

;; UTILITY

(defun keyboard-quit ()
  "Stop all current LISP evaluation.
If you don't know what's happening, messed up, etc. then call this.

Deactivates the mark in the current buffer.
Finishes any prompts/reads.
Quits evaluating all LISP up until the very top level (minimum needed)."
  ;; disable the selection in the current buffer
  (set-mark-activation nil)
  ;; quit any ongoing prompts
  (finish-read)
  ;; stop executing lisp all LITE LISP---this also stops this function,
  ;; so make sure it's at the end.
  (quit-lisp))


;; TODO: With environments recently being entirely reworked, we're
;; going to have to also rework all of these. Either by writing
;; builtins that allow us to operate on the environment atom type, or
;; by writing a function that converts from an atom of environment type
;; to a list of bindings, or something.

(defmacro env-foreach (current-env callback)
  "Call CALLBACK on each and every binding within all environments reachable from CURRENT-ENV.
CALLBACK is called with a single argument: a pair with car of symbol key and cdr of value."
  `(let ((iterator ,current-env))
     (while (! (nilp iterator))
       (dolist (item (env-bindings iterator) t)
         (,callback item))
       (define iterator (env-parent iterator))
       )))

(defun list-functions ()
  "List all of the functions currently defined in the environment."
  (env-set-direct (env) 'outstr "")
  (env-foreach (env) (lambda (item)
                       (when (or (builtinp (cdr item))
                                 (closurep (cdr item)))
                         (define outstr (string-concat (string-concat outstr "\\n")
                                                       (to-string (car item)))))))
  outstr)

(defun list-closures ()
  "List all of the closures currently defined in the environment."
  (env-set-direct (env) 'outstr "")
  (env-foreach (env) (lambda (item)
                       (when (closurep (cdr item))
                         (define outstr (string-concat (string-concat outstr "\\n")
                                                       (to-string (car item)))))))
  outstr)

(defun list-macros ()
  "List all of the macros currently defined in the environment."
  (env-set-direct (env) 'outstr "")
  (env-foreach (env) (lambda (item)
                       (when (macrop (cdr item))
                         (define outstr (string-concat (string-concat outstr "\\n")
                                                       (to-string (car item)))))))
  outstr)

(defun list-builtins ()
  "List all of the functions currently defined in the environment."
  (env-set-direct (env) 'outstr "")
  (env-foreach (env) (lambda (item)
                       (when (builtinp (cdr item))
                         (define outstr (string-concat (string-concat outstr "\\n")
                                                       (to-string (car item)))))))
  outstr)

(defun all-functions ()
  "List all of the functions currently defined in the environment,
and print out their respective docstrings."
  (env-set-direct (env) 'outstr "")
  ;; TODO: Build list then sort?
  (env-foreach (env) (lambda (item)
                       (when (or (builtinp (cdr item))
                                 (closurep (cdr item))
                                 (macrop   (cdr item)))
                         (define outstr (string-concat outstr (to-string (car item))))
                         (define outstr (string-concat outstr "\\n"))
                         (let ((docstr (docstring (car item))))
                           (when docstr
                             (define outstr (string-concat outstr docstr))
                             (define outstr (string-concat outstr "\\n"))))
                         (define outstr (string-concat outstr "\\n\\n"))
                         )))
  outstr)

(defun print-functions ()
  "List all of the functions currently defined in the environment,
and print out their respective docstrings."
  (prins (all-functions)))

(defmacro save-point-and-mark (buffer . body)
  "Evaluate body, then restore point and mark state of BUFFER.
Return the result of BODY."
  `(let ((original-point           (buffer-point ,buffer))
         (original-mark            (buffer-mark  ,buffer))
         (original-mark-activation (buffer-mark-active ,buffer)))
     (let ((result (progn ,@body)))
       (buffer-set-point           ,buffer original-point)
       (buffer-set-mark            ,buffer original-mark)
       (buffer-set-mark-activation ,buffer original-mark-activation)
       result)))

(defmacro with-current-buffer (buffer . body)
  "Evaluate body with CURRENT-BUFFER set to BUFFER,
then restore CURRENT-BUFFER. Return the result of BODY."
  `(let ((original-buffer current-buffer))
     (set current-buffer ,buffer)
     (let ((result (progn ,@body)))
       (set current-buffer original-buffer)
       result)))

;; BUFFERS

(defun buffer-prev-line (buffer)
  "Get the line before the current line, if possible."
  (let ((original-point (buffer-point current-buffer)))
    (if (= (buffer-seek-byte current-buffer "\\n" -1) 0)
        (buffer-set-point current-buffer 0)
        nil)
    (let ((output (buffer-current-line current-buffer)))
      (buffer-set-point current-buffer original-point)
      output)))

(defun buffer-next-line (buffer)
  "Get the line after the current line, if possible."
  (let ((original-point (buffer-point current-buffer)))
    (buffer-seek-byte current-buffer "\\n" 1)
    (let ((output (buffer-current-line current-buffer)))
      (buffer-set-point current-buffer original-point)
      output)))

(defun byte-at-point (buffer)
  "Get the byte under the point in BUFFER."
  (buffer-index buffer (buffer-point buffer)))

(defun byte-before-point (buffer)
  "Get the byte just before the point in BUFFER.
If point is zero, get byte at point."
  (let ((point (buffer-point buffer)))
    (if (= point 0)
        (buffer-index buffer 0)
        (buffer-index buffer (- point 1)))))

;; Navigation

(defun backward-bytes (n)
  "Decrement point of `CURRENT-BUFFER` by N bytes."
  (set-point (- (point) n)))

(defun forward-bytes (n)
  "Increment point of `CURRENT-BUFFER` by N bytes."
  (set-point (+ (point) n)))

(defun backward-byte ()
  "Decrement point of `CURRENT-BUFFER` by one byte."
  (backward-bytes 1))

(defun forward-byte ()
  "Increment point of `CURRENT-BUFFER` by one byte."
  (forward-bytes 1))

(defun utf8-continuation-byte-p (byte)
  "Return T iff BYTE is a UTF8 continuation byte (MSB set and MSB - 1 clear).
Otherwise, return nil."
  (and (> (bitand byte 128) 0) (= 0 (bitand byte 64))))

(defun utf8-point-at-continuation-byte-p ()
  "Return T iff point is at a UTF8 continuation byte (MSB set and MSB - 1 clear).
Otherwise, return nil."
  (utf8-continuation-byte-p
   ;; Get byte at point as 1-length string then first byte of string as integer.
   (string-index (byte-at-point current-buffer) 0)))

;; TODO: Make these return current-buffer to be consistent with other navigation functions.

(defun utf8-forward-char ()
  "Increment point of `CURRENT-BUFFER` by one utf8 codepoint."
  (forward-bytes 1)
  (when (utf8-point-at-continuation-byte-p)
    (utf8-forward-char)))

(defun utf8-backward-char ()
  "Decrement point of `CURRENT-BUFFER` by one utf8 codepoint."
  (backward-bytes 1)
  (when (utf8-point-at-continuation-byte-p)
    (utf8-backward-char)))

(defun utf8-remove-char ()
  "Remove the bytes representing the utf8 codepoint point of `CURRENT-BUFFER` ending just before point."
  (remove 1)
  (when (utf8-point-at-continuation-byte-p)
    (utf8-remove-char)))

(defun utf8-remove-char-forward ()
  "Remove the bytes representing the next utf8 codepoint point of `CURRENT-BUFFER` starting at point."
  (remove-forward 1)
  (when (utf8-point-at-continuation-byte-p)
    (utf8-remove-char-forward)))

(defun utf8-backspace ()
  "Remove the utf8 codepoint behind the cursor in the current buffer,
or, if mark is active and a region is selected, remove the entire region."
  (if (buffer-mark-active current-buffer)
      ;; Mark is active, a region is selected.
      (let ((mark (mark))
            (p (point))
            (length (region-length)))
        ;; Don't remove anything if region is of zero-length
        (unless (= length 0)
          ;; Determine if we need to remove forward or backward from point.
          (if (> mark p)
              ;; Mark is past point, remove forward.
              (remove-forward length)
              ;; Point is past mark, remove backward.
              (remove length))))
      ;; Mark isn't active, no region selected---remove a single byte backwards.
      (utf8-remove-char)))



(defun utf16-high-surrogate-pair-p (byte)
  "Return T iff BYTE represents the high byte of a UTF16 surrogate pair.
Otherwise, return nil."
  ;; byte >= 0xd800 && byte <= 0xdbff
  (and (>= byte 55296) (<= byte 56319)))

(defun utf16-low-surrogate-pair-p (byte)
  "Return T iff BYTE represents the low byte of a UTF16 surrogate pair.
Otherwise, return nil."
  ;; byte >= 0xdc00 && byte <= 0xdfff
  (and (>= byte 56320) (<= byte 57343)))

(defun utf16-surrogate-pair-p (byte)
  "Return T iff BYTE represents the high or low byte of a UTF16 surrogate pair.
Otherwise, return nil."
  ;; byte >= 0xd800 && byte <= 0xdfff
  (and (>= byte 55296) (<= byte 57343)))

(defun utf16-point-in-surrogate-pair-p ()
  "Return T iff point is at the start of a UTF16 surrogate pair.
Otherwise, return nil."
  (utf16-surrogate-pair-p (string-index (byte-at-point current-buffer) 0)))

(defun utf16-point-at-surrogate-pair-p ()
  "Return T iff point is at the start of a UTF16 surrogate pair.
Otherwise, return nil."
  (utf16-high-surrogate-pair-p (string-index (byte-at-point current-buffer) 0)))

(defun utf16-forward-char ()
  "Increment point of `CURRENT-BUFFER` by one utf16 codepoint."
  (if (utf16-point-at-surrogate-pair-p)
      (forward-bytes 2)
      (forward-bytes 1)))

(defun utf16-backward-char ()
  "Decrement point of `CURRENT-BUFFER` by one utf16 codepoint."
  (backward-byte)
  (when (utf16-point-in-surrogate-pair-p)
    (backward-byte)))

(defun utf16-remove-char ()
  "Remove the bytes representing the utf16 codepoint point of `CURRENT-BUFFER` ending just before point."
  (backward-byte)
  (when (utf16-point-in-surrogate-pair-p)
    (backward-byte)))

(defun utf16-remove-char-forward ()
  "Remove the bytes representing the next utf16 codepoint point of `CURRENT-BUFFER` starting at point."
  (if (utf16-point-at-surrogate-pair-p)
      (remove-forward 2)
      (remove-forward 1)))

(defun utf16-backspace ()
  "Remove the utf16 codepoint behind the cursor in the current buffer,
or, if mark is active and a region is selected, remove the entire region."
  (if (buffer-mark-active current-buffer)
      ;; Mark is active, a region is selected.
      (let ((mark (mark))
            (p (point))
            (length (region-length)))
        ;; Don't remove anything if region is of zero-length
        (unless (= length 0)
          ;; Determine if we need to remove forward or backward from point.
          (if (> mark p)
              ;; Mark is past point, remove forward.
              (remove-forward length)
              ;; Point is past mark, remove backward.
              (remove length))))
      ;; Mark isn't active, no region selected---remove a single byte backwards.
      (utf16-remove-char)))


(defun utf32-forward-char ()
  "Increment point of `CURRENT-BUFFER` by one utf32 codepoint."
  (forward-bytes 4))

(defun utf32-backward-char ()
  "Decrement point of `CURRENT-BUFFER` by one utf32 codepoint."
  (backward-bytes 4))

(defun utf32-remove-char ()
  "Remove the bytes representing the utf32 codepoint of `CURRENT-BUFFER` ending just before point."
  (remove 4))

(defun utf32-remove-char-forward ()
  "Remove the bytes representing the next utf32 codepoint of `CURRENT-BUFFER` starting at point."
  (remove-forward 4))

(defun utf32-backspace ()
  "Remove the utf32 codepoint behind the cursor in the current buffer,
or, if mark is active and a region is selected, remove the entire region."
  (if (buffer-mark-active current-buffer)
      ;; Mark is active, a region is selected.
      (let ((mark (mark))
            (p (point))
            (length (region-length)))
        ;; Don't remove anything if region is of zero-length
        (unless (= length 0)
          ;; Determine if we need to remove forward or backward from point.
          (if (> mark p)
              ;; Mark is past point, remove forward.
              (remove-forward length)
              ;; Point is past mark, remove backward.
              (remove length))))
      ;; Mark isn't active, no region selected---remove a single byte backwards.
      (utf32-remove-char)))


(defun beginning-of-line ()
  "Move to the beginning of the current line"
  (if (= (seek-byte "\\n" -1) 0)
      (set-point 0)
      (forward-byte))
  current-buffer)

(defun end-of-line ()
  "Move to the end of the current line."
  (if (eq (index (point)) "\\n")
      "\n"
      (when (= (seek-byte "\\n" 1) 0)
        ;; get to end of last line.
        (forward-bytes 999999999999)))
  current-buffer)

;; "input\nstring\nexample\n" ^ = point
;;           ^
;;       |---|                  = column-offset
;; |-----|                      = previous-line-length
(defun backward-line ()
  "Move backward one line, if possible.

Attempts to keep point column the same."
  ;; Calculate column offset and move to end of previous line.
  (let ((column-offset (seek-byte "\\n" -1)))
    ;; 'buffer-seek-byte' returns zero when the given byte was not found.
    ;; The following 'unless' means nothing will happen on the first line.
    (unless (= column-offset 0)
      (let ((previous-line-length-impl (seek-byte "\\n" -1)))
        (let ((previous-line-length
               (if (= 0 previous-line-length-impl)
                   (point)
                   previous-line-length-impl))
              (beginning-of-previous-line
               (if (= previous-line-length-impl 0)
                   0
                   (+ 1 (point)))))
          (set-point beginning-of-previous-line)
          (if (> previous-line-length column-offset)
              (forward-bytes (- column-offset 1))
              (end-of-line))))))
  current-buffer)


(defun current-point-column-offset ()
  "Get the byte offset of the point into the current line."
  (save-point-and-mark
   current-buffer
   (let ((column-offset (seek-byte "\\n" -1)))
     (if (= column-offset 0)
         (+ 1 (point))
         column-offset))))

;; "input\nstring\nexample\n" ^ = point
;;           ^
;;       |---|                  = column-offset
;;               |--------|     = next-line-length
(defun forward-line ()
  "Move forward one line, if possible.

Attempts to keep point column the same."
  (let ((column-offset (current-point-column-offset)))
    ;; Seek forward for next newline, unless already over a newline.
    (unless (eq "\\n" (byte-at-point current-buffer))
      (seek-byte "\\n" 1))
    (let ((next-line-length (seek-byte "\\n" 1)))
      (if (= 0 next-line-length)
          (forward-byte)
          (when (> next-line-length column-offset)
            (backward-bytes (- next-line-length column-offset))))))
  ;; Return current-buffer, just to stay consistent between different
  ;; control flows.
  current-buffer)

(defun search-forward ()
  "Set the point to the beginning of the prompted-for string if it is
found after point in the current buffer."
  (seek-substring (read-prompted "search forward: ") 1))

(defun search-backward ()
  "Set the point to the beginning of the prompted-for string if it is
found behind point in the current buffer."
  (seek-substring (read-prompted "search backward: ") -1))

(set word-delimiters "., \\n(){}[]<>"
     "Each of the bytes within this string is a word delimiter.")

(defun forward-word ()
  "Move forward by one word (separated by 'WORD-DELIMITERS')."
  (seek-past-byte word-delimiters 1)
  (when (= (seek-byte word-delimiters 1) 0)
      (forward-bytes 999999999999)))

(defun backward-word ()
  "Move backward by one word (separated by 'WORD-DELIMITERS')."
  ;; Skip backwards past word delimiters
  (seek-past-byte word-delimiters -1)
  ;; Skip backwards to word delimiter
  (if (= (seek-byte word-delimiters -1) 0)
      (backward-bytes 999999999999)
      ;; If a word was skipped, move forward one byte.
      (forward-byte)))

;; MISCELLANEOUS

(macro set-docstring (x string)
  "Set the docstring of X to STRING and return it."
  `(define ,x ,x ,string))

(defun user-says-yes (prompt)
  "Return T iff the user response to PROMPT matches the string 'yes',
otherwise return nil. Useful for ensuring the user would like to do
something before doing it."
  ;; TODO: Join "yes" hint on to given prompt.
  ;; TODO: Think about handling capitilization.
  (eq "yes" (read-prompted prompt)))

(defun save-current-buffer-with-msg (msg)
  "Save buffer 'CURRENT-BUFFER' and return MSG."
  (save current-buffer)
  msg)

(defun evaluate-line ()
  "Evaluate the current line in the current buffer as a LITE LISP expression."
  (evaluate-string (current-line)))

(defun evaluate-first-line ()
  "Evaluate the first line of the current buffer as a LITE LISP expression."
  (evaluate-string (line 0)))

(defun evaluate-prompted ()
  "Evaluate the first line of the current buffer as a LITE LISP expression."
  (evaluate-string (read-prompted "Eval: ")))

(defun activate-mark ()
  "Activate mark in current buffer, and update mark to current point."
  (set-mark-activation t)
  (set-mark (point)))

(defun deactivate-mark ()
  "Deactivate mark in current buffer."
  (set-mark-activation nil))

(defun set-mark-to-point ()
  "Set mark in current buffer to current point."
  (set-mark (point)))

(defun set-or-toggle-mark ()
  "If mark is disabled, activate it. If point is over mark, de-activate mark.
Otherwise, set mark to current point."
  (if (! (mark-active))
      (progn
        (set-mark-to-point)
        (toggle-mark))
      (if (= (point) (mark))
          (toggle-mark)
          (set-mark-to-point))))

(defun insert-lf ()
  "Insert a newline character, but keep point where it is."
  (insert "\\n")
  (set-point (- (point) 1)))

(defun insert-crlf ()
  "Insert a carriage return and a newline character, but keep point
where it is."
  (insert "\\r\\n")
  (set-point (- (point) 2)))

(defun select-current-line ()
  "Mark region of the line the point resides within in the current buffer."
  (beginning-of-line)
  (activate-mark)
  (end-of-line)
  )

(defun copy-current-line ()
  "Copy the current line to the clipboard."
  (save-point-and-mark current-buffer
   (select-current-line)
   (clipboard-copy current-buffer)))

(defun delete-line-past ()
  "Delete up to the next newline after point."
  (save-point-and-mark current-buffer
   (activate-mark)
   (end-of-line)
   (forward-byte)
   (remove (region-length))))

(defun backspace ()
  "Remove the byte behind the cursor in the current buffer, or, if mark
is active and a region is selected, remove the entire region."
  (if (buffer-mark-active current-buffer)
      ;; Mark is active, a region is selected.
      (let ((mark (mark))
            (p (point))
            (length (region-length)))
        ;; Don't remove anything if region is of zero-length
        (unless (= length 0)
          ;; Determine if we need to remove forward or backward from point.
          (if (> mark p)
              ;; Mark is past point, remove forward.
              (remove-forward length)
              ;; Point is past mark, remove backward.
              (remove length))))
      ;; Mark isn't active, no region selected---remove a single byte backwards.
      (remove 1)))


(define default-font-size 18
  "The default font size")

(define font-size default-font-size
  "The current font size, if using SIZE-... commands.")

(define font-size-step 2
  "The amount in point size that the current font will be changed by SIZE-... commands.")

(define font-size-min 2
  "The minimum font size that is able to be set from SIZE-... commands.")

(defun size-set (n)
    "Increase the point size of the current font."
    (unless (integerp n)
      (error "size-set MUST be passed an integer."))
    (set font-size (max font-size-min n))
    (change-font-size font-size))

(defun size-reset ()
  "Reset the point size of the current font to default."
  (size-set default-font-size))

(defun size-increase ()
    "Increase the point size of the current font."
    (set font-size (max font-size-min
                        (+ font-size font-size-step)))
    (change-font-size font-size))

(defun size-decrease ()
    "Increase the point size of the current font."
    (set font-size (max font-size-min
                        (- font-size font-size-step)))
    (change-font-size font-size))


;; WINDOW:
;;   (z-level (posx . posy) (sizex . sizey) (scrollx . scrolly) (contents . properties))

;; PROPERTY:
;;   (id offset length (fg.r fg.g fg.b fg.a) (bg.r bg.g bg.b bg.a))


(defun active-window ()
  "Return the active window from window list based on index."
  (elt windows active-window-index))

;; TODO: `set` API for the rest of the members.
;;   NOTE: scroll-up and scroll-down are builtins, but they no longer
;;   have to be.

(defun window-z (window)
  "Return the x position of WINDOW."
  (car window))

(defun set-window-z (window)
  "Set the z level of WINDOW to VALUE."
  (setcar window value))

(defun window-x (window)
  "Return the x position of WINDOW."
  (car (elt window 1)))

(defun set-window-x (window value)
  "Reposition WINDOW at x position VALUE."
  (setcar (elt window 1) value))

(defun window-y (window)
  "Return the y position of WINDOW."
  (cdr (elt window 1)))

(defun set-window-y (window value)
  "Reposition WINDOW at y position VALUE."
  (setcdr (elt window 1) value))

(defun window-w (window)
  "Return the width value in integer percent (0 - 100 inclusive) of WINDOW."
  (car (elt window 2)))

(defun set-window-width (window value)
  "Resize WINDOW width to the given width VALUE."
  (setcar (elt window 2) value))

(defun window-h (window)
  "Return the height value in integer percent (0 - 100 inclusive) of WINDOW."
  (cdr (elt window 2)))

(defun set-window-height (window value)
  "Resize WINDOW height to the given VALUE."
  (setcdr (elt window 2) value))

(defun window-scrollx (window)
  "Return the horizontal scroll value of WINDOW."
  (car (elt window 3)))

(defun set-window-scrollx (window value)
  "Associate the given horizontal scroll VALUE with WINDOW."
  (unless (integerp value)
    (error "Can only set window scroll x to value of integer type."))
  (setcar (elt window 3) value))

(defun window-scrolly (window)
  "Return the vertical scroll value of WINDOW."
  (cdr (elt window 3)))

(defun set-window-scrolly (window value)
  "Associate the given vertical scroll VALUE with WINDOW."
  (unless (integerp value)
    (error "Can only set window scroll y to value of integer type."))
  (setcdr (elt window 3) value))

(defun window-scroll-reset (window)
  "Reset both horizontal and vertical scrolling values of WINDOW."
  (set-window-scrollx window 0)
  (set-window-scrolly window 0))

(defun scroll-reset ()
  "Reset both horizontal and vertical scrolling values of active window."
  (window-scroll-reset (active-window)))

(defun window-contents (window)
  "Return the contents associated with WINDOW."
  (car (elt window 4)))

(defun set-window-contents (window new-contents)
  "Set the contents associated with WINDOW to NEW-CONTENTS."
  (setcar (elt window 4) new-contents))

(defun window-text-properties (window)
  "Return the contents associated with WINDOW."
  (cdr (elt window 4)))

(defun set-window-text-properties (window new-properties)
  "Set the text properties associated with WINDOW to NEW-PROPERTIES."
  (setcdr (elt window 4) new-properties))

(defun get-window-text-property-impl (properties id)
  "Call 'get-window-text-property, not this!"
  (if (pairp properties)
      (if (= id (caar properties))
          (car properties)
          (get-window-text-property-impl (cdr properties) id))
      nil))

(defun get-window-text-property (window id)
  "Return the window property with ID, or nil if it wasn't found"
  (get-window-text-property-impl (window-text-properties window) id))

(defun add-text-property-to-window (window id offset length fg bg)
  "Built a text property to add to WINDOW from the given parameters.
Foreground (FG) and background (BG) are in format of '(R G B A)'."
  ;; Property:
  ;; (id offset length (fg.r fg.g fg.b fg.a) (bg.r bg.g bg.b bg.a))
  ;; Type checking
  ;; TODO: Ensure window is window...
  (unless (and ; (integerp id)
               (integerp offset)
               (integerp length)

               ;; (R G B A) integer values
               (pairp fg)
               (integerp (car fg))
               (pairp (cdr fg))
               (integerp (car (cdr fg)))
               (pairp (cdr (cdr fg)))
               (integerp (car (cdr (cdr fg))))
               (pairp (cdr (cdr (cdr fg))))
               (integerp (car (cdr (cdr (cdr fg)))))

               ;; (R G B A) integer values
               (pairp bg)
               (integerp (car bg))
               (pairp (cdr bg))
               (integerp (car (cdr bg)))
               (pairp (cdr (cdr bg)))
               (integerp (car (cdr (cdr bg))))
               (pairp (cdr (cdr (cdr bg))))
               (integerp (car (cdr (cdr (cdr bg))))))
    (error "Invalid argument types in add-text-property-to-window"))
  (set-window-text-properties
   window (cons (list id offset length fg bg)
                (window-text-properties window)))
  id)

(defun add-text-property (id offset length fg bg)
  "Add a property to the active window. See 'add-text-property-to-window'."
  (add-text-property-to-window (active-window) id offset length fg bg))

(defun remove-window-text-property-impl (properties prev-properties id)
  "Call 'remove-window-text-property', not this!

Update cdr of PREV-PROPERTIES with CDR of removed property.
First call should have prev-properties set to the (contents . properties) pair."
  (if (pairp properties)
      (if (= id (caar properties))
          (setcdr prev-properties (cdr properties))
          (remove-window-text-property-impl (cdr properties) properties id))
      nil))

(defun remove-window-text-property (window id)
  "Remove the window property with id of ID within WINDOW."
  (remove-window-text-property-impl (window-text-properties window) (elt window 4) id))

(defun remove-text-property (id)
  "Remove the window property with id of ID from the active window."
  (remove-window-text-property (active-window) id))

(defun set-active-window-buffer (buffer)
  "Set the contents displayed in the active window to the given buffer"
  ;; Reset window contents to given buffer.
  (set-window-contents (active-window) buffer)
  ;; Reset text properties to nil.
  (set-window-text-properties (active-window) nil))

(defun set-buffer-from-active-window ()
  "Set the contents displayed in the active window to the given buffer"
  ;; TODO: Ensure window is not displaying a string.
  (set current-buffer (window-contents (active-window))))

(defun set-active-window (n)
  "Select a different window in the window list as active."
  (when (and
         (> n -1)
         (< n (length windows)))
    (set active-window-index n)
    (set-buffer-from-active-window)))

(defun cycle-active-window (direction)
  "Change active window to another window in the list, if possible.
If DIRECTION is negative, decrease active window index. Otherwise, increase it."
  (if (or (= direction 0)(> direction 0))
      (unless (set-active-window (+ 1 active-window-index))
        (set-active-window 0))
        (unless (set-active-window (- active-window-index 1))
          (set-active-window (length windows)))))

(defun switch-current-buffer ()
  "Prompt user for a filepath to open a buffer at, and set current-buffer."
  (set current-buffer (open-buffer (read-prompted "filepath: ")))
  (set-active-window-buffer current-buffer))

(defun layout-1 ()
  "One main window."
  (set windows   `((0 (0  . 0) (100 . 100) (0 . 0) (,current-buffer . nil))))
  (set-active-window 0))

(defun layout-vsplit ()
  "Two windows side by side."
  (set windows `((0 (0  . 0) (50  . 100) (0 . 0) (,current-buffer . nil))
                 (0 (50 . 0) (50  . 100) (0 . 0) (,current-buffer . nil))))
  (set-active-window 0))

(defun layout-hsplit ()
  "Two windows top and bottom."
  (set windows `((0 (0 .  0) (100 .  50) (0 . 0) (,current-buffer . nil))
                 (0 (0 . 50) (100 .  50) (0 . 0) (,current-buffer . nil))))
  (set-active-window 0))

(defun layout-maxpane ()
  "Four windows, one in each quadrant."
  (set windows `((0 (40 . 40) (20 . 20) (0 . 0) (,current-buffer . nil))
                 (0 ( 0 .  0) (50 . 50) (0 . 0) (,current-buffer . nil))
                 (0 (50 .  0) (50 . 50) (0 . 0) (,current-buffer . nil))
                 (0 ( 0 . 50) (50 . 50) (0 . 0) (,current-buffer . nil))
                 (0 (50 . 50) (50 . 50) (0 . 0) (,current-buffer . nil))))
  (set-active-window 0))


(layout-1)

(evaluate-file "lisp/std/binds.lt")
