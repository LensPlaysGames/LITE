;; Include this file in LITE by passing the path to this file as a command-line argument.

;; More easily access nested pair elements.
(define caar
    (lambda (x)
      (car (car x)))
  "Get the left side of the left side of the given pair.")
(define cadr
    (lambda (x)
      (car (cdr x)))
  "Get the left side of the right side of the given pair.

Most often used to get the next element in a list.")

;; LIST FOLDING FUNCTIONS
;; https://en.wikipedia.org/wiki/Fold_(higher-order_function)

;; Fold List Left
(define foldl
    (lambda (some-function initial-value some-list)
      (if some-list
          (foldl some-function
                 (some-function initial-value (car some-list))
                 (cdr some-list))
          initial-value))
  "Apply SOME-FUNCTION to each element within SOME-LIST in reverse order,
as well as place INITIAL-VALUE at the beginning of SOME-LIST.")

;; Fold List Right
(define foldr
    (lambda (some-function initial-value some-list)
      (if some-list
          (some-function (car some-list)
                         (foldr some-function
                                initial-value
                                (cdr some-list)))
          initial-value))
  "Applies SOME-FUNCTION to each element within SOME-LIST,
as well as places INITIAL-VALUE at the end of SOME-LIST.")

;; LIST UTILITY FUNCTIONS

(define list
    (lambda items
      (foldr cons nil items))
  "Create a list from any amount of given ITEMS.")

(define list-reverse
    (lambda items
      (foldl (lambda (a b) (cons b a)) nil items))
  "Create a list from any amount of given ITEMS in reverse order.")

(define reverse-list
    (lambda (list)
      (foldl (lambda (a b) (cons b a)) nil list))
  "Reverse a given LIST.")

;; Append list B to list A.
(define append
    (lambda (a b)
      (foldr cons b a))
  "Append list A to list B")

;; MAPPING

(define unary-map
    (lambda (some-function some-list)
      (foldr (lambda (x rest) (cons (some-function x) rest))
             nil
             some-list)))

(define map
    (lambda (some-function . arg-lists)
      (if (car arg-lists)
          (cons (apply some-function (unary-map car arg-lists))
                (apply map (cons some-function (unary-map cdr arg-lists))))
          nil)))

;; QUASIQUOTATION

(macro quasiquote (x)
       "Quote the given expression, but parse 'UNQUOTE' and 'UNQUOTE-SPLICING'."
       (if (pairp x)
           (if (eq (car x) 'unquote)
               (cadr x)
               (if (pairp (car x))
                   (if (eq (caar x) 'unquote-splicing)
                       (list 'append
                             (cadr (car x))
                             (list 'quasiquote (cdr x)))
                       (list 'cons
                             (list 'quasiquote (car x))
                             (list 'quasiquote (cdr x))))
                   (list 'cons
                         (list 'quasiquote (car x))
                         (list 'quasiquote (cdr x)))))
           (list 'quote x)))

;; Make UNQUOTE and UNQUOTE-SPLICING cause an error when used outside of quasiquote
(macro unquote _
       "Disallow UNQUOTE outside of QUASIQUOTE"
       (print "UNQUOTE should not be used outside of QUASIQUOTE."))
(macro unquote-splicing _
       "Disallow UNQUOTE-SPLICING outside of QUASIQUOTE"
       (print "UNQUOTE-SPLICING should not be used outside of QUASIQUOTE."))

;; HELPER MACROS

;; `DEFUN` enforces a docstring when defining a named lambda.
(macro defun (name args docstring . body)
       "Define a named lambda function with a given docstring."
       `(define ,name (lambda ,args ,@body) ,docstring))

;; `DEFMACRO` allows for macro bodies to be evaluated sequentially, like progn.
(macro defmacro (macro-name args docstring . body)
       "Define a macro."
       `(macro ,macro-name ,args ,docstring ((lambda () ,@body))))

(macro let (defs . body)
       "Bind the given symbols to the given values while evaluating body."
       `((lambda ,(map car defs) ,@body)
         ,@(map cadr defs)))

(macro progn body
       "Evaluate the BODY expressions sequentially, returning the last returned value."
       (if body `((lambda () ,@body)) nil))

;; ARITHMETIC & LOGIC

;; Redefine '+' operator to handle any amount of integer arguments.
(define +
    (let ((old+ +))
      (lambda ints (foldl old+ 0 ints)))
  "Return the sum of any amount of integer arguments.")

;; Redefine '*' operator to handle any amount of integer arguments.
(define *
    (let ((old* *))
      (lambda ints (foldl old* 1 ints)))
  "Return the product of any amount of integer arguments.")

(define abs
    (lambda (x)
      (if (< x 0)
          (* x -1)
          x))
  "Return X's distance from zero, which is always positive,
also known as the absolute value.")

(macro when (condition . body)
       "Evaluate BODY iff CONDITION evaluates to any non-nil value."
       `(if ,condition ((lambda () ,@body)) nil))

(macro unless (condition . body)
       "Evaluate BODY iff CONDITION evaluates to nil."
       `(if (! ,condition) ((lambda () ,@body)) nil))

;; ASSOCIATION LISTS
;; also known as ALISTS

(macro alist-set (alist key value)
       "Return ALIST with KEY associated to VALUE."
       `(cons (cons ,key ,value) ,alist))

(defun alist-get (alist key)
  "Get the value associated with KEY in ALIST, or nil if not found."
  (if (eq key (caar alist))
      (cdr (car alist))
      (when (cdr alist)
        (alist-get (cdr alist) key))))

;; STRUCTURES

(defun structurep (structure)
  "Return T iff STRUCTURE has the structure of a structure, otherwise nil. :^)"
  (progn
    (let ((member (car structure)))
      (if (pairp member)
          (if (symbolp (car member))
              (if (cdr structure) (structurep (cdr structure)) t)
              (progn
                (print "structure member identifying symbol must be a symbol.")
                (print (car member))
                nil))
          (progn
            (print "structure member is not a pair")
            (print member)
            nil)))))

;; TODO: It would be very cool to define parameterized constructors
;;       automatically for every structure that is defined.
;;       i.e. for vector3 structure generate something like:
;;       (set construct-vector3 (lambda (x y z) ...) "...")
(defmacro defstruct (id-symbol docstring structure)
  "Set ID-SYMBOL to STRUCTURE after type-checking."
  (if (symbolp `,id-symbol)
      `(if (structurep ',structure)
           (set ,id-symbol ',structure ,docstring)
           (progn
             (print "ERROR: defstruct argument STRUCTURE must be a structure.")
             "defstruct argument STRUCTURE must be a structure."))
      (progn
        (print "ERROR: defstruct argument ID-SYMBOL must be a symbol.")
        "defstruct argument ID-SYMBOL must be a symbol.")))

(defmacro make (symbol)
  "Return a copy of the structure bound to SYMBOL, or nil if SYMBOL is not bound to a structure."
  (let ((structure (evaluate symbol)))
    `(if ,(structurep structure)
         ',(copy structure)
         (print "ERROR: STRUCT-SYMBOL passed to MAKE must be bound to a structure."))))

(defmacro access (symbol . body)
  "Bind member identifiers to member values from structure bound to SYMBOL.
Like 'LET', but for a structure's members."
  (let ((structure (evaluate symbol)))
    `((lambda ,(map car structure) ,@body) ,@(map cadr structure))))

(defmacro get-member (symbol member-id)
  "Get value of member within struct bound to SYMBOL with identifier of MEMBER-ID."
  `(car (alist-get ,symbol ',member-id)))

(defmacro call-member (symbol member-id . args)
  "Get value of member within struct bound to SYMBOL with identifier of MEMBER-ID."
  `((car (alist-get ,symbol ',member-id)) ,@args))

(defun set-member (structure id value)
  "Within STRUCTURE, bind ID to VALUE."
  (if (member id (map car structure))
      (setcar (alist-get structure id) value)
      (progn
        (print "ERROR: ID passed to SET-MEMBER must be a member of STRUCTURE.")
        "ID passed to SET-MEMBER must be a member of STRUCTURE.")))

(defmacro set-member-sym (symbol member value)
  ""
  `(setcar (alist-get ,symbol ',member) ,(evaluate value)))

;; BUFFERS

(defun buffer-prev-line (buffer)
  "Get the line before the current line, if possible."
  (let ((original-point (buffer-point current-buffer)))
    (if (= (buffer-seek-byte current-buffer "\\n" -1) 0)
        (buffer-set-point current-buffer 0)
        nil)
    (let ((output (buffer-current-line current-buffer)))
      (buffer-set-point current-buffer original-point)
      output)))

(defun buffer-next-line (buffer)
  "Get the line after the current line, if possible."
  (let ((original-point (buffer-point current-buffer)))
    (buffer-seek-byte current-buffer "\\n" 1)
    (let ((output (buffer-current-line current-buffer)))
      (buffer-set-point current-buffer original-point)
      output)))

;; Navigation

(defun backward-bytes (n)
  "Decrement point of `CURRENT-BUFFER` by N bytes."
  (buffer-set-point current-buffer (- (buffer-point current-buffer) n)))

(defun forward-bytes (n)
  "Increment point of `CURRENT-BUFFER` by N bytes."
  (buffer-set-point current-buffer (+ (buffer-point current-buffer) n)))

(defun backward-byte ()
  "Decrement point of `CURRENT-BUFFER` by one byte."
  (backward-bytes 1))

(defun forward-byte ()
  "Increment point of `CURRENT-BUFFER` by one byte."
  (forward-bytes 1))

(defun beginning-of-line ()
  "Move to the beginning of the current line"
  (if (= (buffer-seek-byte current-buffer "\\n" -1) 0)
      (buffer-set-point current-buffer 0)
      (forward-byte)))

(defun end-of-line ()
  "Move to the end of the current line."
  (if (eq (buffer-index current-buffer (buffer-point current-buffer)) "\\n")
      "\n"
      (if (= (buffer-seek-byte current-buffer "\\n" 1) 0)
          (forward-bytes 999999999999) ;; get to end of last line.
          "End of line.")))

(defun backward-line ()
  "Move backward one line, if possible.

Attempts to keep point column the same."
  ;; Calculate column offset and move to end of previous line.
  (let ((column-offset (buffer-seek-byte current-buffer "\\n" -1)))
    (when (eq (buffer-index current-buffer (buffer-point current-buffer)) "\\r")
      (forward-byte))
    ;; If on the first line, do nothing.
    (unless (= column-offset 0)
      (let ((distance-from-end-to-column (+ (- (string-length (buffer-current-line current-buffer)) column-offset) 1)))
        (when (> distance-from-end-to-column 0)
          (backward-bytes distance-from-end-to-column))))))

(defun forward-line ()
  "Move forward one line, if possible.

Attempts to keep point column the same."
  (let ((original-point (buffer-point current-buffer)))
    ;; Seek backwards to newline and keep track of originating column.
    (let ((column-offset
           (let ((column-offset-impl (buffer-seek-byte current-buffer "\\n" -1)))
             ;; If cursor is on the first line of the buffer,
             (if (= column-offset-impl 0)
                 ;; then column offset is one above cursor byte offset.
                 (progn
                   (when (eq (buffer-index current-buffer (buffer-point current-buffer)) "\\n")
                     (backward-byte))
                   (+ 1 original-point))
                 ;; otherwise, return bytes moved.
                 column-offset-impl))))
      ;; Seek forward to next newline.
      (buffer-seek-byte current-buffer "\\n" 1)
      ;; if next line has space to navigate to originating column,
      (if (<= column-offset (string-length (buffer-next-line current-buffer)))
          ;; then navigate to the originating column.
          (forward-bytes column-offset)
          ;; Otherwise, seek to the next newline.
          (when (= (buffer-seek-byte current-buffer "\\n" 1) 0)
            ;; If no newline is found, move to end of buffer.
            (forward-bytes 999999999999))))))

(defun search-forward ()
  "Set the point to the beginning of the prompted-for string if it is found in current buffer."
  (buffer-seek-substring current-buffer (read-prompted "search forward: ") 1))

(defun search-backward ()
  "Set the point to the beginning of the prompted-for string if it is found in current buffer."
  (buffer-seek-substring current-buffer (read-prompted "search forward: ") -1))

;; MISCELLANEOUS

(macro set-docstring (x string)
  "Set the docstring of X to STRING and return it."
  `(define ,x ,x ,string))

(defun user-says-yes (prompt)
  "Return T iff the user response to PROMPT matches the string 'yes', otherwise return nil.
Useful for ensuring the user would like to do something before doing it."
  ;; TODO: Join "yes" hint on to given prompt.
  ;; TODO: Think about handling capitilization.
  (eq "yes" (read-prompted prompt)))

(defun save-current-buffer-with-msg (msg)
  "Save buffer 'CURRENT-BUFFER' and return MSG."
  (save current-buffer)
  msg)

(defun switch-current-buffer ()
  "Prompt user for a filepath to open a buffer at, and set current-buffer."
  (set current-buffer (open-buffer (read-prompted "filepath: "))))

(defun evaluate-line ()
  "Evaluate the current line in the current buffer as a LITE LISP expression."
  (evaluate-string (buffer-current-line current-buffer)))

(defun evaluate-first-line ()
  "Evaluate the first line of the current buffer as a LITE LISP expression."
  (evaluate-string (buffer-line current-buffer 0)))

;; STANDARD KEYBINDINGS

(macro keybind-low-level (keymap keystring keybind)
       "Define keymap to a keymap with KEYSTRING bound to KEYBIND"
       ;; TODO: Use `add-to-list`, once implemented, to avoid duplicates.
       `(define ,keymap (alist-set ,keymap ,keystring ,keybind)))

(defun make-simple-keymap ()
  "Create a small keymap with the usual rebinds that are used for modifier keys."
  (let ((simple-keymap nil))
    (keybind-low-level simple-keymap "LEFT-CONTROL" "CTRL")
    (keybind-low-level simple-keymap "RIGHT-CONTROL" "CTRL")
    (keybind-low-level simple-keymap "LEFT-ALT" "ALTS")
    (keybind-low-level simple-keymap "RIGHT-ALT" "ALTS")
    (keybind-low-level simple-keymap "LEFT-SHIFT" "SHFT")
    (keybind-low-level simple-keymap "RIGHT-SHIFT" "SHFT")
    simple-keymap))

(defmacro get-keymap-or-make-simple (keymap keystring)
  "Get keymap within KEYMAP at KEYSTRING, or make a simple keymap if it doesn't already exist."
  `(let ((keymap-at-keystring (alist-get ,keymap ,keystring)))
    (if keymap-at-keystring keymap-at-keystring (make-simple-keymap))))

(set-docstring keymap "The global keymap containing keybindings.")
;; TODO Bind default SHFT remappings (need double quote escape sequence, as well as better single backslash support.)
(let ((ctrl-keymap (get-keymap-or-make-simple keymap "CTRL")))
  (let ((ctrl-shft-keymap (get-keymap-or-make-simple ctrl-keymap "SHFT")))

    ;; Default control keymap needs the standard modifier rebindings.
    ;; FIXME: This can eventually be removed, once we define the keymap entirely from LISP.
    (keybind-low-level ctrl-keymap "LEFT-CONTROL" "CTRL")
    (keybind-low-level ctrl-keymap "RIGHT-CONTROL" "CTRL")
    (keybind-low-level ctrl-keymap "LEFT-SHIFT" "SHFT")
    (keybind-low-level ctrl-keymap "RIGHT-SHIFT" "SHFT")

    ;; keybinds: Backspace and... forwardspace?
    (keybind-low-level
     ctrl-shft-keymap "d"
     '(buffer-remove current-buffer 1))

    (keybind-low-level
     ctrl-keymap "d"
     '(buffer-remove-forward current-buffer 1))

    ;; keybinds: Simple buffer navigation
    (keybind-low-level ctrl-keymap "f" '(forward-byte))
    (keybind-low-level ctrl-keymap "b" '(backward-byte))
    (keybind-low-level ctrl-keymap "n" '(forward-line))
    (keybind-low-level ctrl-keymap "p" '(backward-line))
    (keybind-low-level ctrl-keymap "a" '(beginning-of-line))
    (keybind-low-level ctrl-keymap "e" '(end-of-line))

    ;; keybinds: Prompted
    (keybind-low-level ctrl-keymap "i" '(search-forward))
    (keybind-low-level ctrl-keymap "r" '(search-backward))
    (keybind-low-level
     ctrl-keymap "s"
     '(save-current-buffer-with-msg "Saved"))

    ;; Update nested keymap(s) in local keymap.
    (keybind-low-level ctrl-keymap "SHFT" ctrl-shft-keymap)
    ;; Update keymap in global environment from local keymap.
    (set keymap (alist-set keymap "CTRL" ctrl-keymap))))

(keybind-low-level keymap "LEFT-ALT"  "ALTS")
(keybind-low-level keymap "RIGHT-ALT" "ALTS")
(let ((alts-keymap (get-keymap-or-make-simple keymap "ALTS")))
  ;; keybinds: Evaluation
  (keybind-low-level alts-keymap "e" '(evaluate-line))
  (keybind-low-level alts-keymap "0" '(evaluate-first-line))

  ;; keybinds: Prompted
  (keybind-low-level alts-keymap "o" '(switch-current-buffer))

  ;; Update keymap in global environemt from local keymap.
  (set keymap (alist-set keymap "ALTS" alts-keymap)))

(let ((shft-keymap (get-keymap-or-make-simple keymap "SHFT")))
  ;; keybind: Shift enter to insert DOS newline (CRLF).
  (keybind-low-level shft-keymap "\\r" '(buffer-insert current-buffer "\\r\\n"))
  ;; Update keymap in global environemt from local keymap.
  (set keymap (alist-set keymap "SHFT" shft-keymap)))
