;; Include this file in LITE by passing the path to this file as a command-line argument.

;; More easily access nested pair elements.
(define caar
    (lambda (x)
      (car (car x)))
  "Get the left side of the left side of the given pair.")
(define cadr
    (lambda (x)
      (car (cdr x)))
  "Get the left side of the right side of the given pair.

Most often used to get the next element in a list.")

;; LIST FOLDING FUNCTIONS
;; https://en.wikipedia.org/wiki/Fold_(higher-order_function)

;; Fold List Left
(define foldl
    (lambda (some-function initial-value some-list)
      (if some-list
          (foldl some-function
                 (some-function initial-value (car some-list))
                 (cdr some-list))
          initial-value))
  "Apply SOME-FUNCTION to each element within SOME-LIST in reverse order,
as well as place INITIAL-VALUE at the beginning of SOME-LIST.")

;; Fold List Right
(define foldr
    (lambda (some-function initial-value some-list)
      (if some-list
          (some-function (car some-list)
                         (foldr some-function
                                initial-value
                                (cdr some-list)))
          initial-value))
  "Applies SOME-FUNCTION to each element within SOME-LIST,
as well as places INITIAL-VALUE at the end of SOME-LIST.")

;; LIST UTILITY FUNCTIONS

(define list
    (lambda items
      (foldr cons nil items))
  "Create a list from any amount of given ITEMS.")

(define list-reverse
    (lambda items
      (foldl (lambda (a b) (cons b a)) nil items))
  "Create a list from any amount of given ITEMS in reverse order.")

(define reverse-list
    (lambda (list)
      (foldl (lambda (a b) (cons b a)) nil list))
  "Reverse a given LIST.")

;; Append list B to list A.
(define append
    (lambda (a b)
      (foldr cons b a))
  "Append list A to list B")

;; MAPPING

(define unary-map
    (lambda (some-function some-list)
      (foldr (lambda (x rest) (cons (some-function x) rest))
             nil
             some-list)))

(define map
    (lambda (some-function . arg-lists)
      (if (car arg-lists)
          (cons (apply some-function (unary-map car arg-lists))
                (apply map (cons some-function (unary-map cdr arg-lists))))
          nil)))

;; QUASIQUOTATION

(macro quasiquote (x)
       "Quote the given expression, but parse 'UNQUOTE' and 'UNQUOTE-SPLICING'."
       (if (pairp x)
           (if (eq (car x) 'unquote)
               (cadr x)
               (if (pairp (car x))
                   (if (eq (caar x) 'unquote-splicing)
                       (list 'append
                             (cadr (car x))
                             (list 'quasiquote (cdr x)))
                       (list 'cons
                             (list 'quasiquote (car x))
                             (list 'quasiquote (cdr x))))
                   (list 'cons
                         (list 'quasiquote (car x))
                         (list 'quasiquote (cdr x)))))
           (list 'quote x)))

;; Make UNQUOTE and UNQUOTE-SPLICING cause an error when used outside of quasiquote
(macro unquote _
       "Disallow UNQUOTE outside of QUASIQUOTE"
       (print "UNQUOTE should not be used outside of QUASIQUOTE."))
(macro unquote-splicing _
       "Disallow UNQUOTE-SPLICING outside of QUASIQUOTE"
       (print "UNQUOTE-SPLICING should not be used outside of QUASIQUOTE."))

;; HELPER MACROS

;; This enforces a docstring when defining a named lambda.
(macro defun (name args docstring . body)
       "Define a named lambda function with a given docstring."
       `(define ,name (lambda ,args ,@body) ,docstring))

;; This copies `MACRO` exactly, it's purely visual.
(macro defmacro (macro-name args docstring . body)
       "Define a macro."
       `(macro ,macro-name ,args ,docstring ,@body))

(macro let (defs . body)
       "Bind the given symbols to the given values while evaluating body."
       `((lambda ,(map car defs) ,@body)
         ,@(map cadr defs)))

;; ARITHMETIC & LOGIC

;; Redefine '+' operator to handle any amount of integer arguments.
(define +
    (let ((old+ +))
      (lambda ints (foldl old+ 0 ints)))
  "Return the sum of any amount of integer arguments.")

;; Redefine '*' operator to handle any amount of integer arguments.
(define *
    (let ((old* *))
      (lambda ints (foldl old* 1 ints)))
  "Return the product of any amount of integer arguments.")

(define abs
    (lambda (x)
      (if (< x 0)
          (* x -1)
          x))
  "Return X's distance from zero, which is always positive,
also known as the absolute value.")

(macro when (condition . body)
       "Evaluate BODY iff CONDITION evaluates to any non-nil value."
       `(if ,condition ,@body nil))

(macro unless (condition . body)
       "Evaluate BODY iff CONDITION evaluates to nil."
       `(if (! ,condition) ,@body nil))

;; ASSOCIATION LISTS
;; also known as ALISTS

(macro alist-set (alist key value)
       "Return ALIST with KEY associated to VALUE."
       `(cons (cons ,key ,value) ,alist))

(define alist-get
    (lambda (alist key)
      (if (eq key (car (car alist)))
          ;;then
          (cdr (car alist))
          ;;else
          (if (cdr alist)
              (alist-get (cdr alist) key)
              nil)))
  "Get the value associated with KEY in ALIST, or nil if not found.")

;; BUFFERS

;; Navigation

(defun backward-bytes (n)
  "Decrement point of `CURRENT-BUFFER` by N bytes."
  (buffer-set-point current-buffer (- (buffer-point current-buffer) n)))

(defun forward-bytes (n)
  "Increment point of `CURRENT-BUFFER` by N bytes."
  (buffer-set-point current-buffer (+ (buffer-point current-buffer) n)))

(macro backward-byte ()
  "Decrement point of `CURRENT-BUFFER` by one byte."
  (backward-bytes 1))

(macro forward-byte ()
  "Increment point of `CURRENT-BUFFER` by one byte."
  (forward-bytes 1))

;; MISCELLANEOUS

(macro set-docstring (x string)
       "Set the docstring of X to STRING and return it."
       `(define ,x ,x ,string))

;; STANDARD KEYBINDINGS

(define keymap
    (alist-set
     keymap "CTRL"
     (alist-set
      (alist-get keymap "CTRL") "b"
      '(backward-byte))))

(define keymap
    (alist-set
     keymap "CTRL"
     (alist-set
      (alist-get keymap "CTRL") "f"
      '(forward-byte))))

;; Save current buffer with "CTRL" "s"
(define keymap
    (alist-set
     keymap "CTRL"
     (alist-set
      (alist-get keymap "CTRL") "s"
      '(save current-buffer))))

;; Evaluate current line with "CTRL" "e"
(define keymap
    (alist-set
     keymap "CTRL"
     (alist-set
      (alist-get keymap "CTRL") "e"
      '(evaluate-string
        (buffer-current-line current-buffer)))))

;; Evaluate zeroeth line with "CTRL" "0"
(define keymap
    (alist-set
     keymap "CTRL"
     (alist-set
      (alist-get keymap "CTRL") "0"
      '(evaluate-string
        (buffer-line current-buffer 0)))))

;; Evaluate current buffer with "LEFT-ALT" "e"
(define keymap
    (alist-set
     keymap "LEFT-ALT"
     (alist-set
      (alist-get keymap "LEFT-ALT") "e"
      '(evaluate-string
        (buffer-string current-buffer)))))


(defun user-says-yes (prompt)
  "Return T iff the user response to PROMPT matches the string 'yes', otherwise return nil.
Useful for ensuring the user would like to do something before doing it."
  ;; TODO: Join "yes" hint on to given prompt.
  ;; TODO: Think about capitilization option.
  (eq "yes" (read-prompted prompt)))
