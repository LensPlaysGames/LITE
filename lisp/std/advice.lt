;;; LITE LISP FUNCTION ADVICE
;;; Depends on:
;;; -> basics.lt

(defmacro advice-add (original-func-symbol
                      advice-kind-symbol
                      advising-func-symbol)
  "Advise ORIGINAL-FUNC according to ADVICE-KIND with ADVISING-FUNC."
  (if (eq advice-kind-symbol 'around)
      (let ((original-func (evaluate original-func-symbol)))
        `(set ,original-func-symbol
              (lambda args (--advice
                            '(,original-func-symbol ,original-func)
                            ',advising-func-symbol
                            args))))
      (error "ADVICE-ADD: Unrecognised advice-kind-symbol argument")))

;; TODO: Okay, we can get a function's body, but we still aren't able
;; to interpret the actual data of a closure as a closure. So we will
;; need some builtin that turns the data representation of a closure
;; into an actual closure type atom, not just lists.
;;(defmacro advice-remove (original-func-symbol)
;;  "Bind the passed symbol to the original unadvised function."
;;  `(set ,original-func-symbol (cadr (cadr (cadr (car (function-body ,original-func-symbol)))))))

;; This is called when an advised function is called.
;; (--advice 'foo 'bar <args>) : produced by advice-add
(defun --advice (original around-advisor . rest)
  "You probably don't want to call this or use this directly.
This function is inserted by advice-add and removed by advice-remove.

'around  :: Given a function to advise, `foo`, and the advising
            function `bar`, make further calls to `foo` act like
            `(lambda args (bar foo args))` where `args` is the
            parameter signature of `foo`."
  (when around-advisor
    (apply around-advisor `(,(car (cdr original)) ,@(car rest)))))

;; Just a small confidence check.
(defun foo (a b c) ""
  (+ a b c))
(foo 17 17 35) ;; 69

(defun bar (oldfun a b c) ""
  (+ (apply oldfun `(,a ,b ,c)) 1))
(bar 'foo 17 17 35) ;; 70

(advice-add foo around bar)
(when (! (= (foo 17 17 35) 70))
  (error "Advice doesn't work, sweet pea"))

;; TODO: (advice-remove foo), check answer again.

;; FIXME: We don't have a way to unbind symbols, currently.
(set foo nil)
(set bar nil)
