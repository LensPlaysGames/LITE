;;; LITE LISP STANDARD BASICS

;; More easily access nested pair elements.
(define caar
    (lambda (x)
      (car (car x)))
  "Get the left side of the left side of the given pair.")
(define cadr
    (lambda (x)
      (car (cdr x)))
  "Get the left side of the right side of the given pair.

Most often used to get the next element in a list.")

;; LIST FOLDING FUNCTIONS
;; https://en.wikipedia.org/wiki/Fold_(higher-order_function)

;; Fold List Left
(define foldl
    (lambda (some-function initial-value some-list)
      (if some-list
          (foldl some-function
                 (some-function initial-value (car some-list))
                 (cdr some-list))
          initial-value))
  ;; TODO: This is a terrible docstring, because it's wrong!
  "Apply SOME-FUNCTION to each element within SOME-LIST in reverse order,
as well as place INITIAL-VALUE at the beginning of SOME-LIST.")

;; Fold List Right
(define foldr
    (lambda (some-function initial-value some-list)
      (if some-list
          (some-function (car some-list)
                         (foldr some-function
                                initial-value
                                (cdr some-list)))
          initial-value))
  "Applies SOME-FUNCTION to each element within SOME-LIST,
as well as places INITIAL-VALUE at the end of SOME-LIST.")

;; LIST UTILITY FUNCTIONS

(define list
    (lambda items
      (foldr cons nil items))
  "Create a list from any amount of given ITEMS.")

(define list-reverse
    (lambda items
      (foldl (lambda (a b) (cons b a)) nil items))
  "Create a list from any amount of given ITEMS in reverse order.")

(define reverse-list
    (lambda (list)
      (foldl (lambda (a b) (cons b a)) nil list))
  "Reverse a given LIST.")

;; Append list B to list A.
(define append
    (lambda (a b)
      (foldr cons b a))
  "Append list A to list B")

;; MAPPING

(define unary-map
    (lambda (some-function some-list)
      (foldr (lambda (x rest) (cons (some-function x) rest))
             nil
             some-list)))

(define map
    (lambda (some-function . arg-lists)
      (if (car arg-lists)
          (cons (apply some-function (unary-map car arg-lists))
                (apply map (cons some-function (unary-map cdr arg-lists))))
          nil)))

;; QUASIQUOTATION

(macro quasiquote (x)
       "Quote the given expression, but parse 'UNQUOTE' and 'UNQUOTE-SPLICING'."
       (if (pairp x)
           (if (eq (car x) 'unquote)
               (cadr x)
               (if (pairp (car x))
                   (if (eq (caar x) 'unquote-splicing)
                       (list 'append
                             (cadr (car x))
                             (list 'quasiquote (cdr x)))
                       (list 'cons
                             (list 'quasiquote (car x))
                             (list 'quasiquote (cdr x))))
                   (list 'cons
                         (list 'quasiquote (car x))
                         (list 'quasiquote (cdr x)))))
           (list 'quote x)))

;; Make UNQUOTE and UNQUOTE-SPLICING cause an error when used outside of quasiquote
(macro unquote _
       "Disallow UNQUOTE outside of QUASIQUOTE"
       (print "UNQUOTE should not be used outside of QUASIQUOTE."))
(macro unquote-splicing _
       "Disallow UNQUOTE-SPLICING outside of QUASIQUOTE"
       (print "UNQUOTE-SPLICING should not be used outside of QUASIQUOTE."))

;; HELPER MACROS

;; `DEFUN` enforces a docstring when defining a named lambda.
(macro defun (name args docstring . body)
       "Define a named lambda function with a given docstring."
       `(define ,name (lambda ,args ,@body) ,docstring))

;; `DEFMACRO` allows for macro bodies to be evaluated sequentially, like progn.
(macro defmacro (macro-name args docstring . body)
       "Define a macro."
       `(macro ,macro-name ,args ,docstring ((lambda () ,@body))))

(macro let (defs . body)
       "Bind the given symbols to the given values while evaluating body."
       `((lambda ,(map car defs) ,@body)
         ,@(map cadr defs)))

(macro when (condition . body)
  "Evaluate BODY iff CONDITION evaluates to any non-nil value."
  `(if ,condition ((lambda () ,@body)) nil))

(macro unless (condition . body)
  "Evaluate BODY iff CONDITION evaluates to nil."
  `(if (! ,condition) ((lambda () ,@body)) nil))


;; CURRENT BUFFER HELPER FUNCTIONS
(define toggle-mark
    (lambda () (buffer-toggle-mark current-buffer))
    "Toggle the mark in the current buffer.")

(define set-mark-activation
    (lambda (state) (buffer-set-mark-activation current-buffer state))
  "Set activation state of mark in BUFFER based on STATE being non-nil or not.")

(define set-mark
    (lambda (mark) (buffer-set-mark current-buffer mark))
  "Set marked byte in BUFFER to MARK.")

(define mark
    (lambda () (buffer-mark current-buffer))
  "Return the byte offset of mark into the current buffer.")

(define mark-active
    (lambda () (buffer-mark-active current-buffer))
  "Return T iff mark is active in current buffer---otherwise, return nil.")

(define region
    (lambda () (buffer-region current-buffer))
  "Return the region between mark and point in current buffer.")

(define region-length
    (lambda () (buffer-region-length current-buffer))
  "Get byte difference between mark and point within current buffer;
the byte length of the selected region")

(define path
    (lambda () (buffer-path current-buffer))
  "Return buffer's path as a string.")

(define insert
    (lambda (contents) (buffer-insert current-buffer contents))
  "Insert CONTENTS into current buffer at point.")

(define remove
    (lambda (count) (buffer-remove current-buffer count))
  "Backspace COUNT bytes from current buffer at point.")

(define remove-forward
    (lambda (count) (buffer-remove-forward current-buffer count))
  "Remove COUNT bytes from current buffer following point.")

(define undo
    (lambda () (buffer-undo current-buffer))
  "Perform an undo on the current buffer.")

(define redo
    (lambda () (buffer-redo current-buffer))
  "Perform an redo on the current buffer.")

(define set-point
    (lambda (point) (buffer-set-point current-buffer point))
  "Set byte offset of cursor within current buffer to POINT.")

(define point
    (lambda () (buffer-point current-buffer))
  "Get byte offset of cursor within current buffer.")

(define index
    (lambda (idx) (buffer-index current-buffer idx))
  "Get byte from current buffer at INDEX.")

(define lines
    (lambda (start count) (buffer-lines current-buffer start count))
  "Get COUNT lines starting at START line within current buffer.")

(define line
    (lambda (number) (buffer-line current-buffer number))
  "Get line NUMBER within current buffer.")

(define current-line
    (lambda () (buffer-current-line current-buffer))
  "Get line surrounding point in current buffer as string.")

(define seek-byte
    (lambda (bytestring direction)
      (buffer-seek-byte current-buffer bytestring direction))
  "Move buffer point to the next byte that is within BYTESTRING.
If no matching bytes are found, don't move point.
Returns the amount of bytes buffer's point was moved.
When DIRECTION is negative, seek backwards.")

(define seek-past-byte
    (lambda (bytestring direction)
      (buffer-seek-past-byte current-buffer bytestring direction))
  "Move buffer point to the next byte that is *not* within BYTESTRING.
Returns the amount of bytes buffer's point was moved.
When DIRECTION is negative, seek backwards.")

(define seek-substring
 (lambda (substring direction)
   (buffer-seek-substring current-buffer substring direction))
  "Move current buffer point to the beginning of the given substring, if it exists.
If no matching substring is found, don't move point.
When direction is negative, search backwards.")
