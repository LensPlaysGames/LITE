;;; LITE LISP UTF8 UTILITIES
;;; Depends on:
;;; -> basics.lt

(defun utf8-continuation-byte-p (byte)
  "Return T iff BYTE is a UTF8 continuation byte (MSB set and MSB - 1 clear).
Otherwise, return nil."
  (and (> (bitand byte 128) 0) (= 0 (bitand byte 64))))

(defun utf8-point-at-continuation-byte-p ()
  "Return T iff point is at a UTF8 continuation byte (MSB set and MSB - 1 clear).
Otherwise, return nil."
  (utf8-continuation-byte-p
   ;; Get byte at point as 1-length string then first byte of string as integer.
   (string-index (byte-at-point current-buffer) 0)))

(defun utf8-point-after-continuation-byte-p ()
  "Return T iff point is just after a UTF8 continuation byte (MSB set and MSB - 1 clear).
Otherwise, return nil."
  (utf8-continuation-byte-p
   ;; Get byte at point as 1-length string then first byte of string as integer.
   (string-index (byte-before-point current-buffer) 0)))

(defun utf8-forward-char-impl ()
  "Increment point of `CURRENT-BUFFER` by one utf8 codepoint.
You should probably call `utf8-forward-char` instead of this."
  ;; Move byte forward by one byte, ensure it's moved by one, then do
  ;; the whole thing again if at a continuation byte.
  (when (and (= (forward-byte) 1) (utf8-point-at-continuation-byte-p))
    (utf8-forward-char)))

(defun utf8-forward-char ()
  "Increment point of `CURRENT-BUFFER` by one utf8 codepoint."
  (if (and (eq (byte-at-point current-buffer) "\\r")
           (eq (byte-after-point current-buffer) "\\n"))
      (forward-bytes 2)
      (utf8-forward-char-impl))
  (cursor-keep-on-screen (active-window))
  current-buffer)

(defun utf8-backward-char-impl ()
  "Decrement point of `CURRENT-BUFFER` by one utf8 codepoint.
You should probably call `utf8-backward-char` instead of this."
  (when (and (= (backward-byte) 1) (utf8-point-at-continuation-byte-p))
    (utf8-backward-char-impl)))

(defun utf8-backward-char ()
  "Decrement point of `CURRENT-BUFFER` by one utf8 codepoint."
  (if (and (eq (buffer-index current-buffer (- (buffer-point current-buffer) 1)) "\\n")
           (eq (buffer-index current-buffer (- (buffer-point current-buffer) 2)) "\\r"))
      (backward-bytes 2)
      (utf8-backward-char-impl))
  (cursor-keep-on-screen (active-window))
  current-buffer)

(defun utf8-remove-char-impl ()
  "Remove the bytes representing the utf8 codepoint point of `CURRENT-BUFFER` ending just before point.
You should probably call `utf8-remove-char` instead of this."
  (if (utf8-point-after-continuation-byte-p)
      (when (= (remove 1) 1)
        (utf8-remove-char-impl))
      (remove 1)))

(defun utf8-remove-char ()
  "Remove the bytes representing the utf8 codepoint point of `CURRENT-BUFFER` ending just before point."
  (if (and (eq (buffer-index current-buffer (- (buffer-point current-buffer) 1)) "\\n")
           (eq (buffer-index current-buffer (- (buffer-point current-buffer) 2)) "\\r"))
      (remove 2)
      (utf8-remove-char-impl))
  (cursor-keep-on-screen (active-window))
  current-buffer)

(defun utf8-remove-char-forward-impl ()
  "Remove the bytes representing the next utf8 codepoint point of `CURRENT-BUFFER` starting at point.
You should probably call `utf8-remove-char-forward` instead of this."
  (when (and (= (remove-forward 1) 1) (utf8-point-at-continuation-byte-p))
    (utf8-remove-char-forward-impl)))

(defun utf8-remove-char-forward ()
  "Remove the bytes representing the next utf8 codepoint point of `CURRENT-BUFFER` starting at point."
  (if (and (eq (byte-at-point current-buffer) "\\r")
           (eq (byte-after-point current-buffer) "\\n"))
      (remove-forward 2)
      (utf8-remove-char-forward-impl))
  (cursor-keep-on-screen (active-window))
  current-buffer)

(defun utf8-backspace ()
  "Remove the utf8 codepoint behind the cursor in the current buffer,
or, if mark is active and a region is selected, remove the entire region."
  (if (buffer-mark-active current-buffer)
      ;; Mark is active, a region is selected.
      (let ((mark (mark))
            (p (point))
            (length (region-length)))
        ;; Don't remove anything if region is of zero-length
        (unless (= length 0)
          ;; Determine if we need to remove forward or backward from point.
          (if (> mark p)
              ;; Mark is past point, remove forward.
              (remove-forward length)
              ;; Point is past mark, remove backward.
              (remove length)))
        (cursor-keep-on-screen (active-window))
        current-buffer)
      ;; Mark isn't active, no region selected---remove a single byte backwards.
      (utf8-remove-char)))
